using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace PyWin32Metadata
{
    public class ParsedInterface : ParsedType
    {
        private readonly List<ParsedMethod> _methods = new();

        public ParsedInterface((string, string) fullName, (string, string) baseFullName)
            : base(fullName)
        {
            BaseFullName = baseFullName;
        }

        public (string, string) BaseFullName { get; }
        public ParsedInterface? BaseInterface { get; set; }
        public IList<ParsedMethod> Methods => _methods;

        public IEnumerable<ParsedInterface> AllInterfaces
        {
            get
            {
                if (IsUnknown || IsDispatch)
                    yield break;

                if (BaseInterface != null)
                {
                    foreach (var bi in BaseInterface.AllInterfaces)
                    {
                        yield return bi;
                    }
                }
                yield return this;
            }
        }

        public string GatewayName
        {
            get
            {
                if (IsUnknown || IsDispatch)
                    return "PyGatewayBase";

                if (Name.StartsWith("I"))
                    return "PyG" + Name.Substring(1);

                return "PyG" + Name;
            }
        }

        public string GenerateCppDeclaration()
        {
            using var writer = new StringWriter();
            using var iw = new IndentedTextWriter(writer);
            GenerateCppDeclaration(iw);
            return writer.ToString();
        }

        public void GenerateCppDeclaration(IndentedTextWriter writer)
        {
            if (writer == null)
                throw new ArgumentNullException(nameof(writer));

            if (BaseInterface == null)
                throw new InvalidOperationException();

            writer.WriteLine($"// This file declares the {Name} Interface and Gateway for Python.");
            writer.WriteLine($"// Generated by {GetType().Namespace}");
            writer.WriteLine("// ---------------------------------------------------");
            writer.WriteLine("//");
            writer.WriteLine("// Interface Declaration");
            writer.WriteLine();
            writer.WriteLine($"class Py{Name} : public Py{BaseInterface.Name} {{");
            writer.Indent++;
            writer.WriteLine("public:");
            writer.Indent++;
            writer.WriteLine($"MAKE_PYCOM_CTOR(Py{Name});");
            writer.WriteLine($"static {Name} *GetI(PyObject *self);");
            writer.WriteLine("static PyComTypeObject type;");
            writer.WriteLine();
            writer.WriteLine("// The Python methods");
            foreach (var method in Methods)
            {
                writer.WriteLine($"static PyObject *{method.Name}(PyObject *self, PyObject *args);");
            }

            writer.WriteLine();
            writer.Indent--;
            writer.WriteLine("protected:");
            writer.Indent++;
            writer.WriteLine($"Py{Name}(IUnknown *pdisp);");
            writer.WriteLine($"~Py{Name}();");
            writer.Indent--;
            writer.Indent--;
            writer.WriteLine("};");
            writer.WriteLine("// ---------------------------------------------------");
            writer.WriteLine("//");
            writer.WriteLine("// Gateway Declaration");
            writer.WriteLine();
            writer.WriteLine($"class {GatewayName} : public {BaseInterface.GatewayName}, public {Name} {{");
            writer.Indent++;
            writer.WriteLine("protected:");
            writer.WriteLine($"{GatewayName}(PyObject *instance) : {BaseInterface.GatewayName}(instance) {{ ; }}");
            writer.WriteLine($"PYGATEWAY_MAKE_SUPPORT2({GatewayName}, {Name}, __uuidof({Name}), {BaseInterface.GatewayName})");
            writer.WriteLine();
            writer.Indent++;
            foreach (var bi in AllInterfaces)
            {
                writer.WriteLine($"// {bi.Name}");
                foreach (var method in bi.Methods)
                {
                    if (method.ReturnType == null)
                        throw new InvalidOperationException();

                    var parameters = string.Join(", ", method.Parameters.Select(p => p.GenerateCppMethodSignature()));
                    if (!method.ReturnType.IsHRESULT)
                    {
                        writer.WriteLine($"STDMETHOD_({method.ReturnType.CppName}, {method.Name})({parameters});");
                    }
                    else
                    {
                        writer.WriteLine($"STDMETHOD({method.Name})({parameters});");
                    }
                    writer.WriteLine();
                }
            }
            writer.Indent--;
            writer.Indent--;
            writer.WriteLine("};");
        }
    }
}
